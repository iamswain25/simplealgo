"use strict";function _interopDefault(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var React=require("react"),React__default=_interopDefault(React),styletronEngineAtomic=require("styletron-engine-atomic"),styletronReact=require("styletron-react"),baseui=require("baseui"),reactJsonToTable=require("react-json-to-table"),formControl=require("baseui/form-control"),spinner=require("baseui/spinner"),card=require("baseui/card"),textarea=require("baseui/textarea"),Algosdk=require("algosdk"),progressSteps=require("baseui/progress-steps"),button=require("baseui/button"),input=require("baseui/input"),notification=require("baseui/notification");const SpacedButton=e=>React.createElement(button.Button,Object.assign({},e,{overrides:{BaseButton:{style:({$theme:e})=>({marginLeft:e.sizing.scale200,marginRight:e.sizing.scale200,marginTop:e.sizing.scale200})}}})),Address=({addr:e=""})=>e.length?React.createElement(notification.Notification,{overrides:{Body:{style:{width:"auto",wordBreak:"break-word"}}}},React.createElement("u",null,e)):null;var Steps=({url:e,token:t,port:a})=>{const[n,o]=React.useState(0),r=React.useMemo(()=>new Algosdk.Algod(t,e,a),[e,t,a]),[c,l]=React.useState({addr:"",sk:new Uint8Array,mnemonic:""}),[s,i]=React.useState(!1),[u,m]=React.useState(!1),[d,R]=React.useState({}),g=React.useCallback(()=>{const{addr:e,sk:t}=Algosdk.generateAccount(),a=Algosdk.secretKeyToMnemonic(t);console.log(e,t),l({addr:e,sk:t,mnemonic:a}),o(1),m(!1)},[]),p=React.useCallback(()=>{m(!0),o(1)},[]);const[E,b]=React.useState(null),[f,S]=React.useState({fee:"0",isLoading:!1,amount:"100000"}),C=React.useCallback(()=>{S({...f,isLoading:!0}),r.getTransactionParams().then(e=>S({...f,firstRound:String(e.lastRound),lastRound:String(e.lastRound+100),fee:String(e.fee),genesisHash:e.genesishashb64,genesisID:e.genesisID,isLoading:!1}))},[f,r,S]);React.useEffect(()=>{c.addr.length&&2===n&&r.accountInformation(c.addr).then(e=>{console.log(e),b(e.amount)})},[n,r,c.addr]);const[y,k]=baseui.useStyletron();return React.createElement(progressSteps.ProgressSteps,{current:n},React.createElement(progressSteps.NumberedStep,{title:"Get your Account"},React.createElement("div",{className:y({...k.typography.font300})},"Create a new account or login with an existing mnemonic"),React.createElement(SpacedButton,{onClick:g},"Create"),React.createElement(SpacedButton,{onClick:p},"Login")),React.createElement(progressSteps.NumberedStep,{title:"Remeber your mnemonic"},React.createElement(card.Card,null,React.createElement(card.StyledBody,null,React.createElement("div",{style:{display:u?"none":"block"}},React.createElement("div",null,React.createElement("i",null,"Your Wallet address is:"),React.createElement(Address,{addr:c.addr}),"and below is the password to your Algo wallet, never lose it!",React.createElement("div",{style:{display:"flex"}},React.createElement(notification.Notification,{kind:notification.KIND.positive,overrides:{Body:{style:{width:"auto",wordBreak:"break-word"}}}},c.mnemonic),React.createElement(button.Button,{onClick:function(){window.localStorage.setItem("algo-mnemonic",c.mnemonic)}},"Save to browser"))),React.createElement(SpacedButton,{onClick:()=>o(0)},"Previous"),React.createElement(SpacedButton,{onClick:()=>o(2)},"Next")),React.createElement("div",{style:{display:u?"block":"none"}},"input your mnemonic below",React.createElement("div",{style:{display:"flex"}},React.createElement(textarea.Textarea,{value:c.mnemonic,error:s,onChange:e=>l({...c,mnemonic:e.currentTarget.value})}),React.createElement(button.Button,{onClick:function(){const e=window.localStorage.getItem("algo-mnemonic")||"";i(!1),l({...c,mnemonic:e})}},"Retrieve from browser")),React.createElement(SpacedButton,{onClick:()=>o(0)},"Previous"),React.createElement(SpacedButton,{onClick:function(){try{const{addr:e,sk:t}=Algosdk.mnemonicToSecretKey(c.mnemonic);Algosdk.isValidAddress(e)?(l({...c,addr:e,sk:t}),o(2)):i(!0)}catch(e){alert(e),i(!0)}}},"Next"))))),React.createElement(progressSteps.NumberedStep,{title:"Check the amount of Algo in the wallet"},React.createElement("div",{className:y({...k.typography.font300})},null===E?React.createElement(spinner.Spinner,null):React.createElement(card.Card,null,"Amount (MicroAlgos):",React.createElement(card.StyledBody,null,E),"in your Algo wallet address:",React.createElement(Address,{addr:c.addr}))),React.createElement(SpacedButton,{onClick:()=>o(1)},"Previous"),React.createElement(SpacedButton,{onClick:()=>{o(3),C()}},"Next")),React.createElement(progressSteps.NumberedStep,{title:"Sign a transaction"},React.createElement("div",{className:y({...k.typography.font300})},React.createElement(formControl.FormControl,{label:"to"},React.createElement(input.Input,{value:f.to,onChange:e=>S({...f,to:e.currentTarget.value})})),React.createElement(formControl.FormControl,{label:"amount",caption:"minimum is 100,000 microalgo"},React.createElement(input.Input,{value:f.amount,onChange:e=>S({...f,amount:e.currentTarget.value})})),React.createElement(formControl.FormControl,{label:"firstRound"},React.createElement(input.Input,{value:f.firstRound,onChange:e=>S({...f,firstRound:e.currentTarget.value})})),React.createElement(formControl.FormControl,{label:"lastRound"},React.createElement(input.Input,{value:f.lastRound,onChange:e=>S({...f,lastRound:e.currentTarget.value})})),React.createElement(formControl.FormControl,{label:"genesisID"},React.createElement(input.Input,{value:f.genesisID,disabled:!0})),React.createElement(formControl.FormControl,{label:"genesisHash"},React.createElement(input.Input,{value:f.genesisHash,disabled:!0})),React.createElement(formControl.FormControl,{label:"note"},React.createElement(textarea.Textarea,{value:f.note,onChange:e=>S({...f,note:e.currentTarget.value})})),React.createElement(formControl.FormControl,{label:"Fee"},React.createElement(input.Input,{value:f.fee,disabled:!0}))),React.createElement(SpacedButton,{onClick:()=>o(2)},"Previous"),React.createElement(SpacedButton,{onClick:function(){const e={...f,fee:Number(f.fee),amount:Number(f.amount),firstRound:Number(f.firstRound),lastRound:Number(f.lastRound),note:new Uint8Array(Buffer.from(f.note||"","base64"))};try{const{txID:t,blob:a}=Algosdk.signTransaction(e,c.sk);console.log(t),R({txID:t}),r.sendRawTransaction(a).then(console.log),o(4)}catch(e){alert(e)}}},"Sign and Send")),React.createElement(progressSteps.NumberedStep,{title:"Check transaction status!"},React.createElement("div",{className:y({...k.typography.font300})},React.createElement(card.Card,null,"check if the transaction is successful",React.createElement(card.StyledBody,null,React.createElement(reactJsonToTable.JsonToTable,{json:d})),React.createElement(card.StyledAction,null,React.createElement(button.Button,{onClick:function(){r.transactionById(d.txID).then(e=>{R({...d,...e}),console.log(e)}).catch(()=>alert("still processing"))}},"Check")))),React.createElement(SpacedButton,{onClick:()=>o(3)},"Prev: Sign another")))};const engine=new styletronEngineAtomic.Client,SimpleAlgo=({url:e="http://hackathon.algodev.network:9100",token:t,port:a})=>React__default.createElement(styletronReact.Provider,{value:engine},React__default.createElement(baseui.BaseProvider,{theme:baseui.LightTheme},React__default.createElement(Steps,{url:e,token:t,port:a})));module.exports=SimpleAlgo;
