{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","Steps.tsx"],"names":["engine","Styletron","SimpleAlgo","url","token","port","value","theme","LightTheme","Steps","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","SpacedButton","props","overrides","BaseButton","style","$theme","marginLeft","sizing","scale200","marginRight","marginTop","Address","addr","length","Body","width","wordBreak","React","current","setCurrent","algod","Algosdk","sk","Uint8Array","mnemonic","wallet","setWallet","mneError","setMneError","isLogin","setLogin","txnStatus","setTxnStatus","createAccountHandler","console","log","loginHander","algoAmount","setAlgoAmount","fee","isLoading","amount","txn","setTxn","getTxnParams","getTransactionParams","res","firstRound","String","lastRound","genesisHash","genesishashb64","genesisID","accountInformation","useStyletron","useCss","title","className","typography","font300","onClick","display","kind","KIND","positive","localStorage","setItem","error","onChange","event","currentTarget","getItem","alert","label","to","e","caption","disabled","note","rawTxn","Number","Buffer","from","txID","blob","sendRawTransaction","json","transactionById","catch"],"mappings":"sNAUMA,EAAS,IAAIC,IAeJC,EAd+B,SAAC,GAIxC,IAAD,IAHJC,WAGI,MAHE,wCAGF,EAFJC,EAEI,EAFJA,MACAC,EACI,EADJA,KAEA,OACE,kBAAC,WAAD,CAAmBC,MAAON,GACxB,kBAAC,eAAD,CAAcO,MAAOC,cACnB,kBAACC,EAAA,EAAD,CAAON,IAAKA,EAAKC,MAAOA,EAAOC,KAAMA,OCPzBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAACC,EAAD,CACEb,MAAM,mEACND,IAAI,mCACJE,KAAM,OAERa,SAASC,eAAe,SD6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,qtBE3HnB,IAAMC,EAAe,SAACC,GACpB,OACE,gBAAC,SAAD,iBACMA,EADN,CAEEC,UAAW,CACTC,WAAY,CACVC,MAAO,gBAAGC,EAAH,EAAGA,OAAH,MAAiB,CACtBC,WAAYD,EAAOE,OAAOC,SAC1BC,YAAaJ,EAAOE,OAAOC,SAC3BE,UAAWL,EAAOE,OAAOC,iBAO/BG,EAAU,SAAC,GAAmB,IAAD,IAAhBC,YAAgB,MAAT,GAAS,EACjC,OAAIA,EAAKC,OAEL,gBAAC,eAAD,CACEX,UAAW,CACTY,KAAM,CAAEV,MAAO,CAAEW,MAAO,OAAQC,UAAW,iBAG7C,yBAAIJ,IAIH,MAGM,gBAA4C,IAAzCnC,EAAwC,EAAxCA,IAAKC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAA4B,EAC1BsC,WAAe,GADW,mBACjDC,EADiD,KACxCC,EADwC,KAElDC,EAAQH,WAAc,kBAAM,IAAII,QAAc3C,EAAOD,EAAKE,KAAO,CACrEF,EACAC,EACAC,IALsD,EAU5BsC,WAAe,CACzCL,KAAM,GACNU,GAAI,IAAIC,WACRC,SAAU,KAb4C,mBAUjDC,EAViD,KAUzCC,EAVyC,OAexBT,YAAe,GAfS,mBAejDU,EAfiD,KAevCC,EAfuC,OAgB5BX,YAAe,GAhBa,mBAgBjDY,EAhBiD,KAgBxCC,EAhBwC,OAiBtBb,WAAoB,IAjBE,mBAiBjDc,EAjBiD,KAiBtCC,EAjBsC,KAkBlDC,EAAuBhB,eAAkB,WAAO,IAAD,EAC9BI,oBAAbT,EAD2C,EAC3CA,KAAMU,EADqC,EACrCA,GACRE,EAAWH,sBAA4BC,GAC7CY,QAAQC,IAAIvB,EAAMU,GAClBI,EAAU,CAAEd,OAAMU,KAAIE,aACtBL,EAAW,GACXW,GAAS,KACR,IACGM,EAAcnB,eAAkB,WACpCa,GAAS,GACTX,EAAW,KACV,IA7BqD,MAqDpBF,WAA8B,MArDV,mBAqDjDoB,EArDiD,KAqDrCC,EArDqC,OAsDlCrB,WAAoB,CACxCsB,IAAK,IACLC,WAAW,EACXC,OAAQ,WAzD8C,mBAsDjDC,EAtDiD,KAsD5CC,EAtD4C,KA2DlDC,EAAe3B,eAAkB,WACrC0B,EAAO,EAAD,GAAMD,EAAN,CAAWF,WAAW,KAY5BpB,EACGyB,uBACAhD,MACC,SAACiD,GAAD,OAOEH,EAAO,EAAD,GACDD,EADC,CAEJK,WAAYC,OAAOF,EAAIG,WACvBA,UAAWD,OAAOF,EAAIG,UAAY,KAClCV,IAAKS,OAAOF,EAAIP,KAChBW,YAAaJ,EAAIK,eACjBC,UAAWN,EAAIM,UACfZ,WAAW,UAGlB,CAACE,EAAKtB,EAAOuB,IAChB1B,aAAgB,WACVQ,EAAOb,KAAKC,QAAsB,IAAZK,GACxBE,EAAMiC,mBAAmB5B,EAAOb,MAAMf,MAAK,SAACiD,GAC1CZ,QAAQC,IAAIW,GACZR,EAAcQ,EAAIL,aAGrB,CAACvB,EAASE,EAAOK,EAAOb,OApG6B,MAmIhC0C,yBAnIgC,oBAmIjDC,GAnIiD,MAmIzC1E,GAnIyC,MAoIxD,OACE,gBAAC,gBAAD,CAAeqC,QAASA,GACtB,gBAAC,eAAD,CAAcsC,MAAM,oBAClB,uBAAKC,UAAWF,GAAO,EAAD,GAAM1E,GAAM6E,WAAWC,WAA7C,2DAGA,gBAAC3D,EAAD,CAAc4D,QAAS3B,GAAvB,UACA,gBAACjC,EAAD,CAAc4D,QAASxB,GAAvB,UAEF,gBAAC,eAAD,CAAcoB,MAAM,yBAClB,gBAAC,OAAD,KACE,gBAAC,aAAD,KACE,uBAAKpD,MAAO,CAAEyD,QAAUhC,EAAoB,OAAV,UAChC,2BACE,oDACA,gBAAClB,EAAD,CAASC,KAAMa,EAAOb,OAFxB,gEAIE,uBAAKR,MAAO,CAAEyD,QAAS,SACrB,gBAAC,eAAD,CACEC,KAAMC,OAAKC,SACX9D,UAAW,CACTY,KAAM,CACJV,MAAO,CAAEW,MAAO,OAAQC,UAAW,iBAItCS,EAAOD,UAEV,gBAAC,SAAD,CAAQoC,QAlIxB,WACE3E,OAAOgF,aAAaC,QAAQ,gBAAiBzC,EAAOD,YAiItC,qBAGJ,gBAACxB,EAAD,CAAc4D,QAAS,kBAAMzC,EAAW,KAAxC,YAGA,gBAACnB,EAAD,CAAc4D,QAAS,kBAAMzC,EAAW,KAAxC,SAEF,uBAAKf,MAAO,CAAEyD,QAAShC,EAAU,QAAU,SAA3C,4BAEE,uBAAKzB,MAAO,CAAEyD,QAAS,SACrB,gBAAC,WAAD,CACEjF,MAAO6C,EAAOD,SACd2C,MAAOxC,EACPyC,SAAU,SAAAC,GAAK,OACb3C,EAAU,EAAD,GACJD,EADI,CAEPD,SAAU6C,EAAMC,cAAc1F,YAIpC,gBAAC,SAAD,CAAQgF,QApJtB,WACE,IAAMpC,EAAWvC,OAAOgF,aAAaM,QAAQ,kBAAoB,GACjE3C,GAAY,GACZF,EAAU,EAAD,GAAMD,EAAN,CAAcD,gBAiJX,0BAIF,gBAACxB,EAAD,CAAc4D,QAAS,kBAAMzC,EAAW,KAAxC,YAGA,gBAACnB,EAAD,CAAc4D,QAtJ1B,WACE,IAAK,IAAD,EACmBvC,sBAA4BI,EAAOD,UAAhDZ,EADN,EACMA,KAAMU,EADZ,EACYA,GACID,iBAAuBT,IAEvCc,EAAU,EAAD,GAAMD,EAAN,CAAcb,OAAMU,QAC7BH,EAAW,IAEXS,GAAY,GAEd,MAAOuC,GACPK,MAAML,GACNvC,GAAY,MA0IJ,YAKR,gBAAC,eAAD,CAAc4B,MAAM,0CAClB,uBAAKC,UAAWF,GAAO,EAAD,GAAM1E,GAAM6E,WAAWC,WAC3B,OAAftB,EACC,gBAAC,UAAD,MAEA,gBAAC,OAAD,4BAEE,gBAAC,aAAD,KAAaA,GAFf,+BAIE,gBAAC1B,EAAD,CAASC,KAAMa,EAAOb,SAI5B,gBAACZ,EAAD,CAAc4D,QAAS,kBAAMzC,EAAW,KAAxC,YACA,gBAACnB,EAAD,CACE4D,QAAS,WACPzC,EAAW,GACXyB,MAHJ,SASF,gBAAC,eAAD,CAAcY,MAAM,sBAClB,uBAAKC,UAAWF,GAAO,EAAD,GAAM1E,GAAM6E,WAAWC,WAC3C,gBAAC,cAAD,CAAac,MAAM,MACjB,gBAAC,QAAD,CACE7F,MAAO8D,EAAIgC,GACXN,SAAU,SAAAO,GAAC,OAAIhC,EAAO,EAAD,GAAMD,EAAN,CAAWgC,GAAIC,EAAEL,cAAc1F,aAGxD,gBAAC,cAAD,CAAa6F,MAAM,SAASG,QAAQ,gCAClC,gBAAC,QAAD,CACEhG,MAAO8D,EAAID,OACX2B,SAAU,SAAAO,GAAC,OAAIhC,EAAO,EAAD,GAAMD,EAAN,CAAWD,OAAQkC,EAAEL,cAAc1F,aAG5D,gBAAC,cAAD,CAAa6F,MAAM,cACjB,gBAAC,QAAD,CACE7F,MAAO8D,EAAIK,WACXqB,SAAU,SAAAO,GAAC,OACThC,EAAO,EAAD,GAAMD,EAAN,CAAWK,WAAY4B,EAAEL,cAAc1F,aAInD,gBAAC,cAAD,CAAa6F,MAAM,aACjB,gBAAC,QAAD,CACE7F,MAAO8D,EAAIO,UACXmB,SAAU,SAAAO,GAAC,OACThC,EAAO,EAAD,GAAMD,EAAN,CAAWO,UAAW0B,EAAEL,cAAc1F,aAIlD,gBAAC,cAAD,CAAa6F,MAAM,aACjB,gBAAC,QAAD,CACE7F,MAAO8D,EAAIU,UAIXyB,UAAQ,KAGZ,gBAAC,cAAD,CAAaJ,MAAM,eACjB,gBAAC,QAAD,CACE7F,MAAO8D,EAAIQ,YAIX2B,UAAQ,KAIZ,gBAAC,cAAD,CAAaJ,MAAM,QACjB,gBAAC,WAAD,CACE7F,MAAO8D,EAAIoC,KACXV,SAAU,SAAAO,GAAC,OAAIhC,EAAO,EAAD,GAAMD,EAAN,CAAWoC,KAAMH,EAAEL,cAAc1F,aAG1D,gBAAC,cAAD,CAAa6F,MAAM,OACjB,gBAAC,QAAD,CACE7F,MAAO8D,EAAIH,IACXsC,UAAQ,MAMd,gBAAC7E,EAAD,CAAc4D,QAAS,kBAAMzC,EAAW,KAAxC,YACA,gBAACnB,EAAD,CAAc4D,QAnLpB,WACE,IAAMmB,EAAmB,KACpBrC,EADoB,CAEvBH,IAAKyC,OAAOtC,EAAIH,KAChBE,OAAQuC,OAAOtC,EAAID,QACnBM,WAAYiC,OAAOtC,EAAIK,YACvBE,UAAW+B,OAAOtC,EAAIO,WACtB6B,KAAM,IAAIvD,WAAW0D,EAAOC,KAAKxC,EAAIoC,MAAQ,GAAI,aAEnD,IAAK,IAAD,EACqBzD,kBAAwB0D,EAAQtD,EAAOH,IAAtD6D,EADN,EACMA,KAAMC,EADZ,EACYA,KACdlD,QAAQC,IAAIgD,GACZnD,EAAa,CAAEmD,SACf/D,EAAMiE,mBAAmBD,GAAMvF,KAAKqC,QAAQC,KAC5ChB,EAAW,GACX,MAAOgD,GACPK,MAAML,MAmKJ,kBAEF,gBAAC,eAAD,CAAcX,MAAM,6BAClB,uBAAKC,UAAWF,GAAO,EAAD,GAAM1E,GAAM6E,WAAWC,WAC3C,gBAAC,OAAD,8CAEE,gBAAC,aAAD,KACE,gBAAC,cAAD,CAAa2B,KAAMvD,KAErB,gBAAC,eAAD,KACE,gBAAC,SAAD,CAAQ6B,QA1KpB,WACExC,EACGmE,gBAAgBxD,EAAUoD,MAC1BtF,MAAK,SAACiD,GACLd,EAAa,EAAD,GAAMD,EAAN,GAAoBe,IAChCZ,QAAQC,IAAIW,MAEb0C,OAAM,kBAAMhB,MAAM,yBAmKX,YAKN,gBAACxE,EAAD,CAAc4D,QAAS,kBAAMzC,EAAW,KAAxC,2B","file":"static/js/main.d6a516b9.chunk.js","sourcesContent":["import React from \"react\";\nimport { Client as Styletron } from \"styletron-engine-atomic\";\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { LightTheme, BaseProvider } from \"baseui\";\nimport Steps from \"./Steps\";\ninterface SimpleAlgoProps {\n  url?: string;\n  token: string;\n  port?: number;\n}\nconst engine = new Styletron();\nconst SimpleAlgo: React.FC<SimpleAlgoProps> = ({\n  url = \"http://hackathon.algodev.network:9100\",\n  token,\n  port\n}) => {\n  return (\n    <StyletronProvider value={engine}>\n      <BaseProvider theme={LightTheme}>\n        <Steps url={url} token={token} port={port} />\n      </BaseProvider>\n    </StyletronProvider>\n  );\n};\n\nexport default SimpleAlgo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App\n    token=\"ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1\"\n    url=\"http://hackathon.algodev.network\"\n    port={9100}\n  />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n// export * from \"./App\";\n","import * as React from \"react\";\nimport { JsonToTable } from \"react-json-to-table\";\n\nimport { FormControl } from \"baseui/form-control\";\nimport { Spinner } from \"baseui/spinner\";\n\nimport { Card, StyledBody, StyledAction } from \"baseui/card\";\n\nimport { Textarea } from \"baseui/textarea\";\nimport * as Algosdk from \"algosdk\";\nimport { Txn, SimpleAlgoProps } from \"./type\";\nimport { ProgressSteps, NumberedStep } from \"baseui/progress-steps\";\nimport { Button, ButtonProps } from \"baseui/button\";\nimport { Input } from \"baseui/input\";\nimport { Notification, KIND } from \"baseui/notification\";\nimport { useStyletron } from \"baseui\";\nconst SpacedButton = (props: ButtonProps) => {\n  return (\n    <Button\n      {...props}\n      overrides={{\n        BaseButton: {\n          style: ({ $theme }) => ({\n            marginLeft: $theme.sizing.scale200,\n            marginRight: $theme.sizing.scale200,\n            marginTop: $theme.sizing.scale200\n          })\n        }\n      }}\n    />\n  );\n};\nconst Address = ({ addr = \"\" }) => {\n  if (addr.length) {\n    return (\n      <Notification\n        overrides={{\n          Body: { style: { width: \"auto\", wordBreak: \"break-word\" } }\n        }}\n      >\n        <u>{addr}</u>\n      </Notification>\n    );\n  }\n  return null;\n};\n\nexport default ({ url, token, port }: SimpleAlgoProps) => {\n  const [current, setCurrent] = React.useState(0);\n  const algod = React.useMemo(() => new Algosdk.Algod(token, url, port), [\n    url,\n    token,\n    port\n  ]);\n  // algod.healthCheck().then(console.log);\n  // algod.status().then(console.log);\n  // algod.block(2183732).then(console.log);\n  const [wallet, setWallet] = React.useState({\n    addr: \"\",\n    sk: new Uint8Array(),\n    mnemonic: \"\"\n  });\n  const [mneError, setMneError] = React.useState(false);\n  const [isLogin, setLogin] = React.useState(false);\n  const [txnStatus, setTxnStatus] = React.useState<any>({});\n  const createAccountHandler = React.useCallback(() => {\n    const { addr, sk } = Algosdk.generateAccount();\n    const mnemonic = Algosdk.secretKeyToMnemonic(sk);\n    console.log(addr, sk);\n    setWallet({ addr, sk, mnemonic });\n    setCurrent(1);\n    setLogin(false);\n  }, []);\n  const loginHander = React.useCallback(() => {\n    setLogin(true);\n    setCurrent(1);\n  }, []);\n  function saveMnemonic() {\n    window.localStorage.setItem(\"algo-mnemonic\", wallet.mnemonic);\n  }\n  function retrieveMnemonic() {\n    const mnemonic = window.localStorage.getItem(\"algo-mnemonic\") || \"\";\n    setMneError(false);\n    setWallet({ ...wallet, mnemonic });\n  }\n  function verifyMnemonic() {\n    try {\n      const { addr, sk } = Algosdk.mnemonicToSecretKey(wallet.mnemonic);\n      const validAddr = Algosdk.isValidAddress(addr);\n      if (validAddr) {\n        setWallet({ ...wallet, addr, sk });\n        setCurrent(2);\n      } else {\n        setMneError(true);\n      }\n    } catch (error) {\n      alert(error);\n      setMneError(true);\n    }\n  }\n  const [algoAmount, setAlgoAmount] = React.useState<number | null>(null);\n  const [txn, setTxn] = React.useState<Txn>({\n    fee: \"0\",\n    isLoading: false,\n    amount: \"100000\"\n  });\n  const getTxnParams = React.useCallback(() => {\n    setTxn({ ...txn, isLoading: true });\n    // Promise.all([algod.status(), algod.versions()]).then(([res1, res2]) => {\n    //   console.log(res1, res2);\n    //   setTxn({\n    //     ...txn,\n    //     firstRound: String(res1.lastRound),\n    //     lastRound: String(res1.lastRound + 100),\n    //     genesisHash: res2.genesis_hash_b64,\n    //     genesisID: res2.genesis_id,\n    //     isLoading: false\n    //   });\n    // });\n    algod\n      .getTransactionParams()\n      .then(\n        (res: {\n          fee: number;\n          consensusVersion: string;\n          genesishashb64: string;\n          genesisID: string;\n          lastRound: number;\n        }) =>\n          setTxn({\n            ...txn,\n            firstRound: String(res.lastRound),\n            lastRound: String(res.lastRound + 100),\n            fee: String(res.fee),\n            genesisHash: res.genesishashb64,\n            genesisID: res.genesisID,\n            isLoading: false\n          })\n      );\n  }, [txn, algod, setTxn]);\n  React.useEffect(() => {\n    if (wallet.addr.length && current === 2) {\n      algod.accountInformation(wallet.addr).then((res: { amount: number }) => {\n        console.log(res);\n        setAlgoAmount(res.amount);\n      });\n    }\n  }, [current, algod, wallet.addr]);\n\n  function signSend() {\n    const rawTxn: Algosdk.Txn = {\n      ...txn,\n      fee: Number(txn.fee),\n      amount: Number(txn.amount),\n      firstRound: Number(txn.firstRound),\n      lastRound: Number(txn.lastRound),\n      note: new Uint8Array(Buffer.from(txn.note || \"\", \"base64\"))\n    };\n    try {\n      const { txID, blob } = Algosdk.signTransaction(rawTxn, wallet.sk);\n      console.log(txID);\n      setTxnStatus({ txID });\n      algod.sendRawTransaction(blob).then(console.log);\n      setCurrent(4);\n    } catch (error) {\n      alert(error);\n    }\n  }\n  function checkTxnStatus() {\n    algod\n      .transactionById(txnStatus.txID)\n      .then((res: any) => {\n        setTxnStatus({ ...txnStatus, ...res });\n        console.log(res);\n      })\n      .catch(() => alert(\"still processing\"));\n  }\n\n  const [useCss, theme] = useStyletron();\n  return (\n    <ProgressSteps current={current}>\n      <NumberedStep title=\"Get your Account\">\n        <div className={useCss({ ...theme.typography.font300 })}>\n          Create a new account or login with an existing mnemonic\n        </div>\n        <SpacedButton onClick={createAccountHandler}>Create</SpacedButton>\n        <SpacedButton onClick={loginHander}>Login</SpacedButton>\n      </NumberedStep>\n      <NumberedStep title=\"Remeber your mnemonic\">\n        <Card>\n          <StyledBody>\n            <div style={{ display: !isLogin ? \"block\" : \"none\" }}>\n              <div>\n                <i>Your Wallet address is:</i>\n                <Address addr={wallet.addr} />\n                and below is the password to your Algo wallet, never lose it!\n                <div style={{ display: \"flex\" }}>\n                  <Notification\n                    kind={KIND.positive}\n                    overrides={{\n                      Body: {\n                        style: { width: \"auto\", wordBreak: \"break-word\" }\n                      }\n                    }}\n                  >\n                    {wallet.mnemonic}\n                  </Notification>\n                  <Button onClick={saveMnemonic}>Save to browser</Button>\n                </div>\n              </div>\n              <SpacedButton onClick={() => setCurrent(0)}>\n                Previous\n              </SpacedButton>\n              <SpacedButton onClick={() => setCurrent(2)}>Next</SpacedButton>\n            </div>\n            <div style={{ display: isLogin ? \"block\" : \"none\" }}>\n              input your mnemonic below\n              <div style={{ display: \"flex\" }}>\n                <Textarea\n                  value={wallet.mnemonic}\n                  error={mneError}\n                  onChange={event =>\n                    setWallet({\n                      ...wallet,\n                      mnemonic: event.currentTarget.value\n                    })\n                  }\n                />\n                <Button onClick={retrieveMnemonic}>\n                  Retrieve from browser\n                </Button>\n              </div>\n              <SpacedButton onClick={() => setCurrent(0)}>\n                Previous\n              </SpacedButton>\n              <SpacedButton onClick={verifyMnemonic}>Next</SpacedButton>\n            </div>\n          </StyledBody>\n        </Card>\n      </NumberedStep>\n      <NumberedStep title=\"Check the amount of Algo in the wallet\">\n        <div className={useCss({ ...theme.typography.font300 })}>\n          {algoAmount === null ? (\n            <Spinner />\n          ) : (\n            <Card>\n              Amount (MicroAlgos):\n              <StyledBody>{algoAmount}</StyledBody>\n              in your Algo wallet address:\n              <Address addr={wallet.addr} />\n            </Card>\n          )}\n        </div>\n        <SpacedButton onClick={() => setCurrent(1)}>Previous</SpacedButton>\n        <SpacedButton\n          onClick={() => {\n            setCurrent(3);\n            getTxnParams();\n          }}\n        >\n          Next\n        </SpacedButton>\n      </NumberedStep>\n      <NumberedStep title=\"Sign a transaction\">\n        <div className={useCss({ ...theme.typography.font300 })}>\n          <FormControl label=\"to\">\n            <Input\n              value={txn.to}\n              onChange={e => setTxn({ ...txn, to: e.currentTarget.value })}\n            />\n          </FormControl>\n          <FormControl label=\"amount\" caption=\"minimum is 100,000 microalgo\">\n            <Input\n              value={txn.amount}\n              onChange={e => setTxn({ ...txn, amount: e.currentTarget.value })}\n            />\n          </FormControl>\n          <FormControl label=\"firstRound\">\n            <Input\n              value={txn.firstRound}\n              onChange={e =>\n                setTxn({ ...txn, firstRound: e.currentTarget.value })\n              }\n            />\n          </FormControl>\n          <FormControl label=\"lastRound\">\n            <Input\n              value={txn.lastRound}\n              onChange={e =>\n                setTxn({ ...txn, lastRound: e.currentTarget.value })\n              }\n            />\n          </FormControl>\n          <FormControl label=\"genesisID\">\n            <Input\n              value={txn.genesisID}\n              // onChange={e =>\n              //   setTxn({ ...txn, genesisID: e.currentTarget.value })\n              // }\n              disabled\n            />\n          </FormControl>\n          <FormControl label=\"genesisHash\">\n            <Input\n              value={txn.genesisHash}\n              // onChange={e =>\n              //   setTxn({ ...txn, genesisHash: e.currentTarget.value })\n              // }\n              disabled\n            />\n          </FormControl>\n\n          <FormControl label=\"note\">\n            <Textarea\n              value={txn.note}\n              onChange={e => setTxn({ ...txn, note: e.currentTarget.value })}\n            />\n          </FormControl>\n          <FormControl label=\"Fee\">\n            <Input\n              value={txn.fee}\n              disabled\n              // onChange={e => setTxn({ ...txn, fee: e.currentTarget.value })}\n            />\n          </FormControl>\n        </div>\n\n        <SpacedButton onClick={() => setCurrent(2)}>Previous</SpacedButton>\n        <SpacedButton onClick={signSend}>Sign and Send</SpacedButton>\n      </NumberedStep>\n      <NumberedStep title=\"Check transaction status!\">\n        <div className={useCss({ ...theme.typography.font300 })}>\n          <Card>\n            check if the transaction is successful\n            <StyledBody>\n              <JsonToTable json={txnStatus} />\n            </StyledBody>\n            <StyledAction>\n              <Button onClick={checkTxnStatus}>Check</Button>\n            </StyledAction>\n          </Card>\n        </div>\n\n        <SpacedButton onClick={() => setCurrent(3)}>\n          Prev: Sign another\n        </SpacedButton>\n      </NumberedStep>\n    </ProgressSteps>\n  );\n};\n"],"sourceRoot":""}